#**MAIN APP**

#pip install -r requirements.txt
import streamlit as st
import pandas as pd
from def_app import (importar_csv, archivo_a_utilizar, genre, artistas, albums, playlist,
                     llevarlo_a_spotify, clean_df, conocer_variables, columns_var)
from io import StringIO
import seaborn as sns
from matplotlib import pyplot as plt

def main():

    st.title("üìä BIENVENIDO A ANALIZANDO MIS FAVORITAS DE SPOTIFY üìä")
    st.sidebar.header("Opciones")
    default_file_path = 'favoritas_hasta_septiembre24.csv'

    nombre = st.text_input("¬øC√≥mo te llamas?")

    if nombre:
        st.success(f"¬°Hola {nombre}! Paso a mostrarte el proceso que he seguido.")

        uploaded_file = importar_csv()  # Llama a la funci√≥n para importar el archivo CSV

        df = archivo_a_utilizar(None, uploaded_file, default_file_path)

        if df is None or df.empty:
            st.error("No se pudo cargar el archivo CSV. Por favor, verifica el archivo.")
            return  # Salir si hay un error

        st.write("DataFrame cargado:", df.shape)


        visulizaciones = st.sidebar.multiselect(
            "¬øQu√© quieres ver?",
            ["Ver el DF en bruto", "Ver el DF limpio", "Explicaci√≥n de las variables",
             "EDA y An√°lisis de las Variables Num√©ricas:",
             "Comparaci√≥n con las m√°s escuchadas de la historia y de 2023",
             "G√©neros, Artistas, Canciones y √Ålbums", "Playlists autom√°ticas con IA"]
        )
        df_bruto = df
        df = clean_df(df)

        if visulizaciones:
            for visualizacion in visulizaciones:
                if visualizacion == "Ver el DF en bruto":
                    st.subheader("\n\nDataframe en bruto")
                    st.dataframe(df_bruto)

                elif visualizacion == "Ver el DF limpio":
                    try:
                        st.subheader("\n\n\nDataframe limpio")
                        st.dataframe(df)
                        st.write("""\nEn este caso he renombrado ciertas columnas, he pasado los milisegundos a segundos y
                                he eliminado las canciones repetidas (Muchos artistas sacan primero un singles y despu√©s introducen
                                estas canciones en un alb√∫m. A veces Spotify tambi√©n falla), aunque en este caso no hab√≠a duplicadas exactas.

                                \n\n En este apartado me gusta ver las canciones m√°s antiguas, m√°s nuevas, las m√°s vivas,
                                cu√°les han sido grabadas en directo, las m√°s populares, etc.
                                """)
                    except ValueError as ve:
                        st.error(f"Error en la limpieza del DataFrame: {ve}")
                    except Exception as e:
                        st.error(f"Ocurri√≥ un error al limpiar el DataFrame: {e}")

                elif visualizacion == "Explicaci√≥n de las variables":
                    st.subheader('\n\nExplicaci√≥n de las variables:')
                    explicacion = conocer_variables()
                    st.write(explicacion)

                elif visualizacion == "EDA y An√°lisis de las Variables Num√©ricas:":
                    st.markdown('\n\n ## **EDA y An√°lisis de las Variables Num√©ricas:**')

                    with st.expander('Ver nombre de las columnas'):

                        st.markdown("\n\n ### Columnas y su informaci√≥n:")
                        st.write(", ".join(df_bruto.columns))
                        st.markdown("\n\n ### Informaci√≥n del DataFrame:")
                        st.write("\n(Aplicamos un .info)")
                        buffer = StringIO()
                        df_bruto.info(buf=buffer)
                        s = buffer.getvalue()
                        st.text(s)

                    with st.expander('Ver duplicados'):
                        duplicados = df_bruto['ID'].duplicated().sum()
                        #duplicados_2 = df_bruto[['Track Name', 'Artist']].duplicated().sum()
                        st.markdown(f"\n\n ### N√∫mero de ID duplicados: {duplicados}")


                    with st.expander('Ver la estad√≠sticas descriptivas'):
                        st.markdown("\n\n ### Estad√≠sticas descriptivas:")
                        st.dataframe(df.describe())


                    with st.expander('Ver las gr√°ficas'):
                        st.markdown("\n\n ### Gr√°ficos:")
                        tipos_de_graficos = ['Gr√°fico de distorsi√≥n', 'Histograma', 'Correlaciones: Mapa de calor']
                        grafico = st.selectbox("¬øQu√© gr√°fico quieres ver?", tipos_de_graficos)


                        if grafico == 'Gr√°fico de distorsi√≥n':
                            x_axis = st.selectbox("Selecciona la variable para el eje X:", columns_var)
                            y_axis = st.selectbox("Selecciona la variable para el eje Y:", columns_var)
                            selected_color = st.color_picker("Elige un color para el gr√°fico", "#0083F9")

                            if st.button("Mostrar gr√°fico"):
                                plt.figure(figsize=(10, 6))
                                plt.scatter(df[x_axis], df[y_axis], color=selected_color)
                                plt.title(f'Gr√°fico de distorsi√≥n: {y_axis} vs {x_axis}')
                                plt.xlabel(x_axis)
                                plt.ylabel(y_axis)
                                plt.grid()
                                st.pyplot(plt)

                        if grafico == 'Histograma':

                            selected_vars = st.multiselect("Selecciona las variables para los histogramas:", columns_var)
                            selected_color = st.color_picker("Elige un color para el histograma",
                                                             "#0083F9")


                            if st.button("Mostrar histogramas"):
                                if len(selected_vars) == 0:
                                    st.warning("Por favor, selecciona al menos una variable para crear un histograma.")
                                else:
                                    for var in selected_vars:
                                        plt.figure(figsize=(10, 6))
                                        plt.hist(df[var], bins=10, color=selected_color, alpha=0.7)  # Histograma
                                        plt.title(f'Histograma de {var}')
                                        plt.xlabel(var)
                                        plt.ylabel(f"Frecuencia de {var}")

                                        plt.grid()
                                        st.pyplot(plt)

                        if grafico == 'Correlaciones: Mapa de calor':
                            correlation_matrix = df[columns_var].corr()


                            plt.figure(figsize=(14, 10))
                            sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', square=True,
                                        linewidths=.5)
                            plt.title("Mapa de Calor de Correlaciones")
                            plt.xticks(rotation=45)
                            plt.yticks(rotation=45)
                            plt.tight_layout()

                            st.pyplot(plt)


                elif visualizacion == "Comparaci√≥n con las m√°s escuchadas de la historia y de 2023":
                    st.subheader('\n\nComparaci√≥n con las m√°s escuchadas de la historia y de 2023:')

                    df_2023 = pd.read_csv('top_canciones_2023_espaa.csv')
                    df_history = pd.read_csv('top_100_most_streamed_songs_on_spotify_updated.csv')
                    clean_df(df_2023)
                    clean_df(df_history)

                    df_2023_var = df_2023[columns_var]
                    df_history_var = df_history[columns_var]
                    df_favs_var = df[columns_var]

                    df_combined = pd.concat([
                        df_favs_var.assign(Category='Favoritas'),
                        df_history_var.assign(Category='M√°s Streameadas Historia'),
                        df_2023_var.assign(Category='M√°s Escuchadas 2023')
                    ], ignore_index=True)

                    # Reemplazar valores de duraci√≥n superiores a 7 minutos por 7 minutos para eliminar ruido y limitar outliers
                    df_combined.loc[df_combined['Duration'] > 420, 'Duration'] = 420

                    variable = st.selectbox("Selecciona la variable a visualizar", options=columns_var)
                    plot_type = st.selectbox("Selecciona el tipo de gr√°fico", options=["violin", "box", "barras"])

                    if plot_type in ["violin", "box"]:
                        plt.figure(figsize=(12, 6))
                        if plot_type == 'violin':
                            sns.violinplot(x='Category', y=variable, hue='Category', data=df_combined, palette="muted",
                                           dodge=False)
                        else:
                            sns.boxplot(x='Category', y=variable, hue='Category', data=df_combined, palette="Set2")

                        plt.title(f'Distribuci√≥n de {variable} ({plot_type.capitalize()} Plot)')
                        plt.ylabel(variable)
                        plt.xlabel("Categor√≠a")
                        st.pyplot(plt)

                    elif plot_type == "barras":
                        means = [df[variable].mean() for df in [df_2023_var, df_history_var, df_favs_var]]
                        medians = [df[variable].median() for df in [df_2023_var, df_history_var, df_favs_var]]

                        metric_type = st.selectbox("Selecciona el tipo de m√©trica", options=["Media", "Mediana"])
                        values = means if metric_type == "Media" else medians

                        plt.figure(figsize=(8, 6))
                        plt.bar(['M√°s Escuchadas 2023', 'M√°s Streameadas Historia', 'Favoritas'], values,
                                color=['blue', 'green', 'red'])
                        plt.title(f'{metric_type} de {variable}')
                        plt.ylabel(metric_type)

                        if variable == 'Acousticness':
                            plt.ylim(0, 0.5)
                        elif variable == 'Danceability':
                            plt.ylim(0, 1)
                        elif variable == 'Popularity':
                            plt.ylim(0, 100)

                        st.pyplot(plt)

                    st.write("\n\n\nVariables a visualizar recomendadas: Duraci√≥n, Popularity y Energy.")

                elif visualizacion == "G√©neros, Artistas, Canciones y √Ålbums":
                    with st.expander("Ver G√©neros"):
                        genre(df)

                    with st.expander("Ver Artistas"):
                        artistas(df)

                    with st.expander("Ver √Ålbums"):
                        albums(df)

                elif visualizacion == "Playlists autom√°ticas con IA":
                    df_clusters, modelo_clustering = playlist(df)
                    llevarlo_a_spotify(df, df_clusters, modelo_clustering)

        else:
            st.warning("Por favor, selecciona al menos una opci√≥n para visualizar.")

    else:
        st.warning("Introduce tu nombre para continuar.")
        st.stop()


if __name__ == '__main__':
    main()
